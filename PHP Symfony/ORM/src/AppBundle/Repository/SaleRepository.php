<?php

namespace AppBundle\Repository;

/**
 * SaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleRepository extends \Doctrine\ORM\EntityRepository
{
    public function salesList()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('cu.name', 'ca.make', 'ca.model', 's.id')
            ->from('AppBundle:Sale', 's')
            ->join('s.carId', 'ca')
            ->join('s.customerId', 'cu')
            ->orderBy('cu.name')
            ->getQuery();

        return $qb->getQuery()->execute();
    }

    public function findSale(int $id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('cu.name', 'ca.make', 'ca.model', 's.id', 'sum(p.price) as price', 's.discount')
            ->from('AppBundle:Sale', 's')
            ->join('s.carId', 'ca')
            ->join('s.customerId', 'cu')
            ->join('ca.parts', 'p')
            ->where('s.id = :id')
            ->setParameter('id', $id)
            ->orderBy('cu.name')
            ->getQuery()
            ->getOneOrNullResult();

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function salesWithDiscount()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('cu.name', 'ca.make', 'ca.model', 's.id', 's.discount')
            ->from('AppBundle:Sale', 's')
            ->join('s.carId', 'ca')
            ->join('s.customerId', 'cu')
            ->where('s.discount > 0')
            ->orderBy('s.discount')
            ->getQuery();

        return $qb->getQuery()->execute();
    }

    public function salesWithPercentDiscount(float $percent)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('cu.name', 'ca.make', 'ca.model', 's.id', 's.discount')
            ->from('AppBundle:Sale', 's')
            ->join('s.carId', 'ca')
            ->join('s.customerId', 'cu')
            ->where('s.discount = :percent')
            ->setParameter('percent', $percent)
            ->orderBy('s.discount')
            ->getQuery();

        return $qb->getQuery()->execute();
    }

    public function getPriceAndDiscount(int $id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('s.discount', 'sum(p.price) as price')
            ->from('AppBundle:Sale', 's')
            ->join('s.customerId', 'cu')
            ->join('s.carId', 'c')
            ->join('c.parts', 'p')
            ->where('cu.id = :id')
            ->setParameter('id', $id)
            ->groupBy('s.discount')
            ->getQuery();

        return $qb->getQuery()->execute();
    }
}
